If we disassemble the binary, and look at the main function, we see this:

   0x0000000000400656 <+0>:     push   %rbp
   0x0000000000400657 <+1>:     mov    %rsp,%rbp
   0x000000000040065a <+4>:     sub    $0x10,%rsp
   0x000000000040065e <+8>:     mov    %fs:0x28,%rax
   0x0000000000400667 <+17>:    mov    %rax,-0x8(%rbp)
   0x000000000040066b <+21>:    xor    %eax,%eax
   0x000000000040066d <+23>:    movl   $0x0,-0xc(%rbp)
   0x0000000000400674 <+30>:    mov    $0x400788,%edi
   0x0000000000400679 <+35>:    mov    $0x0,%eax
   0x000000000040067e <+40>:    callq  0x400520 <printf@plt>
   0x0000000000400683 <+45>:    lea    -0xc(%rbp),%rax
   0x0000000000400687 <+49>:    mov    %rax,%rsi
   0x000000000040068a <+52>:    mov    $0x4007a9,%edi
   0x000000000040068f <+57>:    mov    $0x0,%eax
   0x0000000000400694 <+62>:    callq  0x400550 <__isoc99_scanf@plt>
   0x0000000000400699 <+67>:    mov    -0xc(%rbp),%eax
   0x000000000040069c <+70>:    cmp    $0xcb7359,%eax
   0x00000000004006a1 <+75>:    jne    0x4006c3 <main+109>
   0x00000000004006a3 <+77>:    mov    0x2009ae(%rip),%rax        # 0x601058 <flag>
   0x00000000004006aa <+84>:    mov    %rax,%rsi
   0x00000000004006ad <+87>:    mov    $0x4007b0,%edi
   0x00000000004006b2 <+92>:    mov    $0x0,%eax
   0x00000000004006b7 <+97>:    callq  0x400520 <printf@plt>
   0x00000000004006bc <+102>:   mov    $0x0,%eax
   0x00000000004006c1 <+107>:   jmp    0x4006d2 <main+124>
   0x00000000004006c3 <+109>:   mov    $0x4007d4,%edi
   0x00000000004006c8 <+114>:   callq  0x400500 <puts@plt>
   0x00000000004006cd <+119>:   mov    $0x1,%eax
   0x00000000004006d2 <+124>:   mov    -0x8(%rbp),%rdx
   0x00000000004006d6 <+128>:   xor    %fs:0x28,%rdx
   0x00000000004006df <+137>:   je     0x4006e6 <main+144>
   0x00000000004006e1 <+139>:   callq  0x400510 <__stack_chk_fail@plt>
   0x00000000004006e6 <+144>:   leaveq
   0x00000000004006e7 <+145>:   retq

We know that the program compares an inputted number to a set value, so all we care about is this:

   0x000000000040069c <+70>:    cmp    $0xcb7359,%eax

The value is in hex, so if we convert it to decimal, we get the correct number, 13333337

Now we can get the flag: that_wasnt_between_1_and_100
